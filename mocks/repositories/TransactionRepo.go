// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	repositories "go.simple/structure/repositories"
)

// TransactionRepo is an autogenerated mock type for the TransactionRepo type
type TransactionRepo struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: tsInfo
func (_m *TransactionRepo) CreateTransaction(tsInfo repositories.Transaction) (int64, error) {
	ret := _m.Called(tsInfo)

	var r0 int64
	if rf, ok := ret.Get(0).(func(repositories.Transaction) int64); ok {
		r0 = rf(tsInfo)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.Transaction) error); ok {
		r1 = rf(tsInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserTransactions provides a mock function with given fields: id, userID
func (_m *TransactionRepo) DeleteUserTransactions(id int64, userID int64) (int64, error) {
	ret := _m.Called(id, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTransactions provides a mock function with given fields: userID, accountID
func (_m *TransactionRepo) GetUserTransactions(userID int64, accountID int64) ([]repositories.Transaction, error) {
	ret := _m.Called(userID, accountID)

	var r0 []repositories.Transaction
	if rf, ok := ret.Get(0).(func(int64, int64) []repositories.Transaction); ok {
		r0 = rf(userID, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserTransactions provides a mock function with given fields: tsInfo
func (_m *TransactionRepo) UpdateUserTransactions(tsInfo repositories.Transaction) (int64, error) {
	ret := _m.Called(tsInfo)

	var r0 int64
	if rf, ok := ret.Get(0).(func(repositories.Transaction) int64); ok {
		r0 = rf(tsInfo)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.Transaction) error); ok {
		r1 = rf(tsInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
